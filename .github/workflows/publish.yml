name: Update data and publish report

permissions:
  contents: write

on:
 # schedule:
 #   - cron: '0 0 1 * *'  # Exécuter le 1er de chaque mois à minuit
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    container:
      image: aqlt/publishtc:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add Git safe directory
      run: git config --global --add safe.directory /__w/publishTC.wp/publishTC.wp
    #
    # - name: Verify Git directory
    #   run: |
    #     if [ ! -d ".git" ]; then
    #       echo ".git directory not found!"
    #       exit 1
    #     fi
    #
    # - name: List of files
    #   run: ls -la

    - name: restore
      run: R -e "renv::restore()"

    - name: Update data
      run: Rscript R/1-download-data.R

    - name: Update Trend-Cycle estimates
      run: Rscript R/2-compute-tc.R

    - name: Commit changes
    # Bien penser à aller dans Settings > Actions > General > Workflow permissions > Read and write permissions
      run: |
        git config --global user.name actions-user
        git config --global user.email "actions@github.com"
        git add data
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit"
        else
          git commit -m "Update data"
          git push
        fi
      env:
          REPO_KEY: ${{secrets.GITHUB_TOKEN}}
          username: github-actions

    - name: Render documents
      run: Rscript R/3-render.R
    # - name: Generate Quarto reports
    #   run: |
    #     for file in report/*.qmd; do
    #       if [[ "$(basename "$file")" != "template.qmd" ]]; then
    #       # Afficher le nom du fichier en cours de traitement
    #         echo "Rendering file: $(basename "$file") $(date)"
    #       # Rendre le fichier avec Quarto
    #         quarto render "$file"
    #       fi
    #     done
    #   shell: bash

    - name: Deploy to gh-pages
      run: |
        git checkout --orphan latest_branch
        # Supprimer tous les fichiers sauf le dossier .git
        #shopt -s extglob
        #rm -rf !(report|.git)
        # find . -maxdepth 1 ! -name '.git' ! -name 'report' -exec rm -rf {} +
        git reset
        # Copier uniquement les fichiers HTML du dossier report à la racine
        cp report/*.html .
        [ -f template.html ] && rm template.html
        # Copie de l'article
        cp Article/article.html .
        cp Article/article.pdf .
        # cp -r Article/article_files .
        git add *.html
        git add article.pdf
        # git add article_files
        git commit -m "Update reports"
        git fetch origin
        # Forcer la mise à jour de la branche distante gh-pages
        git push origin latest_branch:gh-pages --force
      env:
          REPO_KEY: ${{secrets.GITHUB_TOKEN}}
          username: github-actions

